
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

struct hitPayload
{
  vec3 hitValue;
};

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = 0) uniform  CameraBuffer{
	mat4 viewMatrix;
	mat4 inverseviewMatrix;
    mat4 projectionMatrix;
    mat4 inverseProjectionMatrix;
	vec3 cameraPosition;
} cameraData;

layout(set = 0, binding = 1) uniform  RenderBuffer{
	float fog;
} globalDrawData;

layout(set = 1, binding = 0) uniform sampler2D primaryRayColorTexture;
layout(set = 1, binding = 1) uniform sampler2D primaryRayNormalTexture;
layout(set = 1, binding = 2) uniform sampler2D primaryRayDepthTexture;

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 2, binding = 1, rgba32f) uniform image2D image;

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    
    vec3 color = vec3(texture(primaryRayColorTexture, d));
    vec3 normal = vec3(texture(primaryRayNormalTexture, d));
    float depth = texture(primaryRayDepthTexture, d).x;

    vec4 clipPos = vec4(d, depth * 2.0 - 1.0, 1.0);
    vec4 viewPos = cameraData.inverseProjectionMatrix * clipPos;
    viewPos = viewPos / viewPos.w;
    vec3 samplePosition = vec3(cameraData.viewMatrix * viewPos);

    vec3 incommingDirection = cameraData.cameraPosition - samplePosition;
    vec3 outgoingdirection = reflect(incommingDirection, normal);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

     /*traceRayEXT(topLevelAS, // acceleration structure
          rayFlags,       // rayFlags
          0xFF,           // cullMask
          0,              // sbtRecordOffset
          0,              // sbtRecordStride
          0,              // missIndex
          samplePosition,     // ray origin
          tMin,           // ray min range
          normal.xyz,  // ray direction
          tMax,           // ray max range
          0               // payload (location = 0)
  );*/

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}