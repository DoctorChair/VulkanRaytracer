#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "BRDF.glsl"
#include "common.glsl"


layout(set = 0, binding = 0) uniform  CameraBuffer{
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
  mat4 projectionMatrix;
  mat4 inverseProjectionMatrix;
	vec3 cameraPosition;
} cameraData;

layout(set = 0, binding = 1) uniform  RenderBuffer{
	uint sunLightCount;
	uint pointLightCount;
  uint maxRecoursionDepth;
  uint maxDiffuseSampleCount;
  uint maxSpecularSampleCount;
  uint maxShadowRaySampleCount;
  uint noiseSampleTextureIndex;
  uint frameNumber;
  uint historyLength;
	uint historyIndex;
	uint nativeResolutionWidth;
	uint nativeResolutionHeight;
  uint environmentTextureIndex;
  float heuristicExponent;
} globalDrawData;


layout(set = 1, binding = 0) uniform sampler2D primaryRayUnlitColorTexture;
layout(set = 1, binding = 1) uniform sampler2D primaryRayNormalTexture;
layout(set = 1, binding = 2) uniform sampler2D primaryRayDepthTexture;
layout(set = 1, binding = 3) uniform sampler2D primaryRayRoughnessMetalicTexture;
layout(set = 1, binding = 4) uniform sampler2D primaryRayPositionTexture;
layout(set = 1, binding = 5) uniform sampler2D primaryRayEmissionTexture;

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 2, binding = 3, rgba16f) uniform image2D image;

layout(std430, set = 3, binding = 0) readonly buffer SunBuffer{
	DirectionalLight sunLights[];
} sunLightBuffer;

layout(std430, set = 3, binding = 1) readonly buffer PointBuffer{
	SphereLight pointLights[];
} pointLightBuffer;


layout(set = 4, binding = 0) uniform sampler linearSampler;
layout(set = 4, binding = 1) uniform sampler nearestSampler;

layout(std430, set = 5, binding = 0) readonly buffer DrawInstanceBuffer{
	drawInstanceData instanceData[];
} drawData;

layout(set = 6, binding = 0) uniform texture2D textures[1024]; 

layout(location = 0) rayPayloadEXT float shadowPayload;

void main()
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec4 color = texture(primaryRayUnlitColorTexture, inUV);
  vec4 normal = texture(primaryRayNormalTexture, inUV);
  float depth = texture(primaryRayDepthTexture, inUV).x;
  vec4 roughnessMetalness = texture(primaryRayRoughnessMetalicTexture, inUV);
  vec4 samplePosition = texture(primaryRayPositionTexture, inUV);
  vec4 primaryEmission = texture(primaryRayEmissionTexture, inUV);

  vec2 imageDimesions = vec2(float(globalDrawData.nativeResolutionWidth), float(globalDrawData.nativeResolutionHeight));
  vec4 outColor = vec4(0.0, 0.0, 0.0, 1.0);

  if(length(normal.xyz) == 0.0)
  {
    vec4 origin    = cameraData.inverseViewMatrix * vec4(0, 0, 0, 1);
    vec4 target    = cameraData.inverseProjectionMatrix * vec4(d.x, d.y, 1, 1);
    vec4 direction = cameraData.inverseViewMatrix * vec4(normalize(target.xyz), 0);

    vec2 sphereUV = vec2(atan(direction.x, direction.z) / (2*M_PI) + 0.5, -direction.y * 0.5 + 0.5); 
    outColor = texture(sampler2D(textures[globalDrawData.environmentTextureIndex], linearSampler), sphereUV);
  }
  else
  {
  
  normal.xyz = normalize(normal.xyz);
  float reflectance = 0.04;		
	float roughness = roughnessMetalness.x;
	float metallic = roughnessMetalness.y;

  vec3 viewDirection = normalize(cameraData.cameraPosition - samplePosition.xyz);
  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  uint  shadowRayFlags =  gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
  float tMin     = 0.01;
  float tMax     = 100.0;
  
  vec2 offset = vec2(float((globalDrawData.frameNumber) % globalDrawData.historyLength)) / imageDimesions;
  vec4 screenNoise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], linearSampler), inUV * imageDimesions / 1024.0 + offset);

  float filterExponent = globalDrawData.heuristicExponent;
  
  vec3 radiance = vec3(0.0, 0.0, 0.0);

  for(uint i = 0; i < globalDrawData.pointLightCount; i++)
  {
    vec3 lightDirection = pointLightBuffer.pointLights[i].position - samplePosition.xyz;
    float distance = length(lightDirection);
    lightDirection = normalize(lightDirection);
    
    vec3 lightSourceRadiance =  vec3(0.0, 0.0, 0.0);

    for(uint s = 0; s < globalDrawData.maxShadowRaySampleCount && dot(lightDirection, normal.xyz) >= 0; s++)
    {
      shadowPayload = 0.0;

      vec4 noise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], linearSampler), screenNoise.xy + vec2(float(s)) / imageDimesions);

      float radius = pointLightBuffer.pointLights[i].radius;
      
      
      vec3 sphereSamplePoint = createLightSamplePoint(-lightDirection,  pointLightBuffer.pointLights[i].position, radius, noise.x, (noise.y * 2.0 - 1.0));
      vec3 lightSampleDirection = sphereSamplePoint - samplePosition.xyz;
      float sphereDistance = length(lightSampleDirection);
      lightSampleDirection = normalize(lightSampleDirection);
      vec3 lightNormal = normalize(sphereSamplePoint - pointLightBuffer.pointLights[i].position);
      
      float cosTheta = max(dot(lightDirection, normal.xyz), 0.0);

      float area = 3*M_PI*pow(radius, 2.0);
      float p = max(dot(-lightSampleDirection, lightNormal), 0.0);

      traceRayEXT(topLevelAS, // acceleration structure
      shadowRayFlags,       // rayFlags
      0x01,           // cullMask
      0,              // sbtRecordOffset
      0,              // sbtRecordStride
      0,              // missIndex
      samplePosition.xyz,     // ray origin
      tMin,           // ray min range
      lightSampleDirection,  // ray direction
      distance,           // ray max range
      0               // payload (location = 0)
      );

      vec2 sphereUV = vec2(atan(lightNormal.x, lightNormal.z) / (2*M_PI) + 0.5, lightNormal.y * 0.5 + 0.5);
      vec4 lightEmission = texture(sampler2D(textures[pointLightBuffer.pointLights[i].emissionIndex], linearSampler), sphereUV); 
        
      float attenuation = 1.0/(sphereDistance*sphereDistance);
	    
      vec3 brdf = cookTorranceGgxBRDF(viewDirection, lightSampleDirection, normal.xyz, color.xyz, metallic, roughness, reflectance);
      
      vec3 lightRadiance = lightEmission.xyz * vec3(pointLightBuffer.pointLights[i].strength * cosTheta * attenuation * shadowPayload * p * area);
	    lightSourceRadiance =  lightSourceRadiance +  brdf * lightRadiance;
     
    }
    radiance = radiance + lightSourceRadiance / float(globalDrawData.maxShadowRaySampleCount);
  }  

  for(uint i = 0; i < globalDrawData.sunLightCount; i++)
  {
    vec3 lightDirection = -sunLightBuffer.sunLights[i].direction;
    lightDirection = normalize(lightDirection);

    vec3 lightSourceRadiance = vec3(0.0);

    for(uint s = 0; s < globalDrawData.maxShadowRaySampleCount && dot(lightDirection, normal.xyz) >= 0; s++)
    {
    shadowPayload = 0.0;
    vec4 noise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], linearSampler), screenNoise.xy + vec2(float(s)) / imageDimesions);

    float radius = sunLightBuffer.sunLights[i].radius;
    vec3 lightSampleDirection = normalize(createLightSampleVector(lightDirection, radius, noise.x, noise.y * 2.0 - 1.0));

    float cosTheta = max(dot(lightSampleDirection, normal.xyz), 0.0);

    float area = M_PI*pow(radius, 2.0);
    float p = max(dot(lightSampleDirection, lightDirection), 0.0);

    traceRayEXT(topLevelAS, // acceleration structure
    shadowRayFlags,       // rayFlags
    0x01,           // cullMask
    0,              // sbtRecordOffset
    0,              // sbtRecordStride
    0,              // missIndex
    samplePosition.xyz,     // ray origin
    tMin,           // ray min range
    lightSampleDirection.xyz,  // ray direction
    tMax,           // ray max range
    0               // payload (location = 0)
    );

    vec3 lightColor = normalize(sunLightBuffer.sunLights[i].color.xyz);

	  vec3 brdf = cookTorranceGgxBRDF(viewDirection, lightSampleDirection, normal.xyz, color.xyz, metallic, roughness, reflectance);
    vec3 lightRadiance = sunLightBuffer.sunLights[i].strength * lightColor * cosTheta * p * area * shadowPayload;
	  lightSourceRadiance = lightSourceRadiance + brdf * lightRadiance;

    }
    radiance = radiance + lightSourceRadiance / float(globalDrawData.maxShadowRaySampleCount);
  }

  outColor.xyz = radiance;
  outColor.xyz = primaryEmission.xyz * (float(length(primaryEmission.xyz) > 0)) + outColor.xyz * (float(length(primaryEmission.xyz) == 0.0));
  
  outColor.w = depth;
  }
  
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), outColor);
}
