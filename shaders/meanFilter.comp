#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform RenderBuffer{
	float fog;
	uint sunLightCount;
	uint pointLightCount;
	uint spotLightCount;
  	uint maxRecoursionDepth;
  	uint maxDiffuseSampleCount;
  	uint maxSpecularSampleCount;
  	uint maxShadowRaySampleCount;
  	uint noiseSampleTextureIndex;
	uint sampleSequenceLength;
	uint frameNumber;
	uint historyLength;
	uint historyIndex;
	uint nativeResolutionWidth;
	uint nativeResolutionHeight;
} globalDrawData;

layout(set = 0, binding = 1, rgba32f) uniform readonly image3D radianceHistory;
layout(set = 0, binding = 2, rgba32f) uniform readonly image2D velocityHistory[16];
layout(set = 0, binding = 3, rgba32f) uniform readonly image2D position; 
layout(set = 0, binding = 4, rgba32f) uniform readonly image2D normal; 
layout(set = 0, binding = 5, r32f) uniform readonly image2D ID;

layout(set = 1, binding = 0, rgba32f) uniform readonly image2D inputImage;
layout(set = 1, binding = 1, rgba32f) uniform writeonly image2D outputImage; 

void main()
{
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);	
	vec3 sum = vec3(0.0);
	for(int i = 0; i < 3; i++)
	{
		int x = coord.x - 1 + i;
		x = clamp(x, 0, int(globalDrawData.nativeResolutionWidth));
		for(int j = 0; j < 3; j++)
		{	
			int y = coord.y - 1 + j;
			clamp(x, 0, int(globalDrawData.nativeResolutionHeight));
			sum = sum + imageLoad(inputImage, ivec2(x, y)).xyz;
		}	
	}
	sum = sum / 9.0;

	imageStore(outputImage, coord, vec4(sum, 1.0));
}