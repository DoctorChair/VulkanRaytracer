
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "BRDF.glsl"
#include "common.glsl"


layout(set = 0, binding = 0) uniform  CameraBuffer{
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
  mat4 projectionMatrix;
  mat4 inverseProjectionMatrix;
	vec3 cameraPosition;
} cameraData;

layout(set = 0, binding = 1) uniform  RenderBuffer{
	float fog;
	uint sunLightCount;
	uint pointLightCount;
	uint spotLightCount;
  uint maxRecoursionDepth;
  uint maxDiffuseSampleCount;
  uint maxSpecularSampleCount;
  uint maxShadowRaySampleCount;
  uint noiseSampleTextureIndex;
} globalDrawData;


layout(set = 1, binding = 0) uniform sampler2D primaryRayUnlitColorTexture;
layout(set = 1, binding = 1) uniform sampler2D primaryRayNormalTexture;
layout(set = 1, binding = 2) uniform sampler2D primaryRayDepthTexture;
layout(set = 1, binding = 3) uniform sampler2D primaryRayRoughnessMetalicTexture;

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 2, binding = 1, rgba32f) uniform image2D image;

layout(std430, set = 3, binding = 0) readonly buffer SunBuffer{

	SunLight sunLights[];
} sunLightBuffer;

layout(std430, set = 3, binding = 1) readonly buffer PointBuffer{

	PointLight pointLights[];
} pointLightBuffer;

layout(std430, set = 3, binding = 2) readonly buffer SpotBuffer{

	SpotLight spotLights[];
} spotLightBuffer; 

layout(set = 4, binding = 0) uniform sampler albedoSampler;
layout(set = 4, binding = 1) uniform sampler metallicSampler;
layout(set = 4, binding = 2) uniform sampler normalSampler;
layout(set = 4, binding = 3) uniform sampler roughnessSampler;

layout(std430, set = 5, binding = 0) readonly buffer DrawInstanceBuffer{
	drawInstanceData instanceData[];
} drawData;

layout(set = 6, binding = 0) uniform texture2D textures[1024]; 

struct hitPayload
{
  bool miss;
  vec3 color;
  vec3 normal;
  vec3 position;
};

layout(location = 0) rayPayloadEXT float shadowPayload;
layout(location = 1) rayPayloadEXT hitPayload payload;



void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    
    vec4 unlitColor = texture(primaryRayUnlitColorTexture, inUV);
    vec4 normal = texture(primaryRayNormalTexture, inUV);
    float depth = texture(primaryRayDepthTexture, inUV).x;
    vec4 roughnessMetalness = texture(primaryRayRoughnessMetalicTexture, inUV);
	
    normal.xyz = normalize(normal.xyz);
	  float reflectance = 0.04;	
	  float roughness = roughnessMetalness.x;
	  float metallic = roughnessMetalness.y;

    vec4 clipSpacePosition = vec4(inUV * 2.0 - 1.0, depth, 1.0);
    vec4 viewSpacePosition = cameraData.inverseProjectionMatrix * clipSpacePosition;
    viewSpacePosition = viewSpacePosition / viewSpacePosition.w;
	  vec4 samplePosition = cameraData.inverseViewMatrix * viewSpacePosition;

    vec3 viewDirection = normalize(cameraData.cameraPosition - samplePosition.xyz);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    uint  shadowRayFlags =  gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    vec4 screenNoise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], albedoSampler), inUV *vec2(1920.0/1024.0, 1080.0/1024.0));

    vec4 outColor = vec4(0.0, 0.0, 0.0, 1.0);
    
    vec3 radiance = vec3(0.0, 0.0, 0.0);

    for(uint i = 0; i < globalDrawData.pointLightCount; i++)
    {
      vec3 lightDirection = pointLightBuffer.pointLights[i].position - samplePosition.xyz;
      float distance = length(lightDirection);
      lightDirection = normalize(lightDirection);
      float cosTheta = dot(lightDirection, normal.xyz);
      
      for(uint s = 0; s < globalDrawData.maxShadowRaySampleCount; s++)
      {
        shadowPayload = 0.0;
        
        if(cosTheta > 0)
        {
          vec4 noise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], albedoSampler), screenNoise.xy + vec2(1.0/float(s)));
        
          float radius = pointLightBuffer.pointLights[i].radius;
          float angle = atan(radius, distance);
          vec3 lightSampleDirection =  normalize(createSampleVector(lightDirection, angle, angle, noise.x - 0.5, noise.y - 0.5));

          vec3 lightNormal = normalize(lightSampleDirection - (dot(lightDirection*distance, lightSampleDirection) * lightDirection*distance));
          float area = 3*M_PI*pow(radius,2.0);
          float p = dot(-lightSampleDirection, lightNormal);

          traceRayEXT(topLevelAS, // acceleration structure
          shadowRayFlags,       // rayFlags
          0xFF,           // cullMask
          0,              // sbtRecordOffset
          0,              // sbtRecordStride
          1,              // missIndex
          samplePosition.xyz,     // ray origin
          tMin,           // ray min range
          lightSampleDirection,  // ray direction
          distance,           // ray max range
          0               // payload (location = 0)
          );
          vec3 lightColor = normalize(pointLightBuffer.pointLights[i].color.xyz);

	        float attenuation = 1.0/(distance*distance);

	        vec3 brdf = cookTorranceGgxBRDF(viewDirection, lightDirection, normal.xyz, unlitColor.xyz, metallic, roughness, reflectance) ;

          vec3 lightRadiance = lightColor * vec3(pointLightBuffer.pointLights[i].strength * max(cosTheta, 0.0) * attenuation * shadowPayload * p * area);

	        radiance =  radiance +  brdf * lightRadiance;
        }
      }
    }  

    radiance = radiance / float(globalDrawData.pointLightCount);

    for(uint i = 0; i < globalDrawData.sunLightCount; i++)
    {
      shadowPayload = 0.0;
      vec3 lightDirection = -sunLightBuffer.sunLights[i].direction;
      float range = tMax;
      lightDirection = normalize(lightDirection);
      
      float cosTheta = dot(lightDirection, normal.xyz);

      if(cosTheta > 0)
      {
        traceRayEXT(topLevelAS, // acceleration structure
        shadowRayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        1,              // missIndex
        samplePosition.xyz,     // ray origin
        tMin,           // ray min range
        lightDirection.xyz,  // ray direction
        range,           // ray max range
        0               // payload (location = 0)
        );

        vec3 lightColor = normalize(sunLightBuffer.sunLights[i].color.xyz);
	      vec3 lightDirection = -normalize(sunLightBuffer.sunLights[i].direction);

	      vec3 brdf = cookTorranceGgxBRDF(viewDirection, lightDirection, normal.xyz, unlitColor.xyz, metallic, roughness, reflectance) * shadowPayload;
	
	      radiance =  radiance + max(cosTheta, 0.0) * brdf * 2.0 * lightColor;
      }
    }  

    outColor.xyz = radiance;

    payload.miss = false;
    payload.position = samplePosition.xyz;
    payload.normal = normal.xyz;
    payload.color = outColor.xyz;

    vec3 priorPosition = cameraData.cameraPosition;

    vec3 diffuseIndirectLight = vec3(0.0);

    
    
    for(uint i = 0; i < globalDrawData.maxDiffuseSampleCount; i++)
    {
      vec4 noise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], albedoSampler),  screenNoise.xy + vec2(1.0/float(i)));
      vec3 sampleVector = createSampleVector(normal.xyz, M_PI, M_PI * 0.5, noise.x - 0.5, noise.y - 0.5);

      traceRayEXT(topLevelAS, // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        samplePosition.xyz,     // ray origin
        tMin,           // ray min range
        normal.xyz,  // ray direction
        tMax,           // ray max range
        1               // payload (location = 0)
      );
      float cosTheta = dot(normal.xyz, sampleVector);

      diffuseIndirectLight = diffuseIndirectLight + ((1.0/M_PI) * unlitColor.xyz * payload.color * cosTheta);
    }
    outColor.xyz = outColor.xyz + (diffuseIndirectLight / float(globalDrawData.maxDiffuseSampleCount));


    vec3 glossyIndirectLight = vec3(0.0);

    for(uint i = 0; i < globalDrawData.maxSpecularSampleCount; i++)
    {
      vec4 noise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], albedoSampler), inUV + vec2(1.0/float(i), 1.0/float(i) + screenNoise.xy));
      vec3 sampleVector = createSampleVector(normal.xyz, M_PI * roughness, M_PI * 0.5 * roughness, noise.x - 0.5, noise.y - 0.5);

      traceRayEXT(topLevelAS, // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        samplePosition.xyz,     // ray origin
        tMin,           // ray min range
        sampleVector,  // ray direction
        tMax,           // ray max range
        1               // payload (location = 0)
      );
      float cosTheta = dot(normal.xyz, sampleVector);

      glossyIndirectLight = glossyIndirectLight;
    }
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), outColor);
}