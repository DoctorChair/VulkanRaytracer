
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "BRDF.glsl"

struct SunLight
{
	vec3 direction;
	vec4 color;
};

struct PointLight
{
	vec3 position;
	vec4 color;
	float strength;
};

struct SpotLight
{
	vec3 position;
	vec3 direction;
	float openingAngle;
	vec4 color;
	float strength;
};

struct Material
{
	uint albedoIndex;
	uint metallicIndex;
	uint normalIndex;
	uint roughnessIndex;	
};

struct drawInstanceData
{
	mat4 modelMatrix;
	Material material;
	uint ID;
};

struct Vertex
{
	vec3 position;
	vec2 texCoord0;
	vec2 texCoord1;
	vec2 texCoord2;
	vec2 texCoord3;
	vec3 normal;
	vec3 tangent;
	vec3 bitangent;
};


layout(set = 0, binding = 0) uniform  CameraBuffer{
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
  mat4 projectionMatrix;
  mat4 inverseProjectionMatrix;
	vec3 cameraPosition;
} cameraData;

layout(set = 0, binding = 1) uniform  RenderBuffer{
	float fog;
	uint sunLightCount;
	uint pointLightCount;
	uint spotLightCount;
  uint maxRecoursionDepth;
} globalDrawData;


layout(set = 1, binding = 0) uniform sampler2D primaryRayColorTexture;
layout(set = 1, binding = 1) uniform sampler2D primaryRayNormalTexture;
layout(set = 1, binding = 2) uniform sampler2D primaryRayDepthTexture;

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 2, binding = 1, rgba32f) uniform image2D image;

layout(std430, set = 2, binding = 2) buffer vertexBuffer{
	Vertex v[];
	} vertices;
	
layout(std430, set = 2, binding = 3) buffer indexBuffer{
	ivec3 i[];
	} indices;

layout(std140, set = 3, binding = 0) readonly buffer SunBuffer{

	SunLight sunLights[];
} sunLightBuffer;

layout(std140, set = 3, binding = 1) readonly buffer PointBuffer{

	PointLight pointLights[];
} pointLightBuffer;

layout(std140, set = 3, binding = 2) readonly buffer SpotBuffer{

	SpotLight spotLights[];
} spotLightBuffer; 

layout(set = 4, binding = 0) uniform sampler albedoSampler;
layout(set = 4, binding = 1) uniform sampler metallicSampler;
layout(set = 4, binding = 2) uniform sampler normalSampler;
layout(set = 4, binding = 3) uniform sampler roughnessSampler;

layout(std430, set = 5, binding = 0) readonly buffer DrawInstanceBuffer{
	drawInstanceData instanceData[];
} drawData;

layout(set = 6, binding = 0) uniform texture2D textures[1024]; 



struct hitPayload
{
  bool shadowed;
  vec3 barycentrics;
  uint primitiveID;
  uint instanceID;
};

layout(location = 0) rayPayloadEXT float shadowed;
layout(location = 1) rayPayloadEXT hitPayload payload;



void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    
    vec4 color = texture(primaryRayColorTexture, inUV);
    vec4 normal = texture(primaryRayNormalTexture, inUV);
    float depth = texture(primaryRayDepthTexture, inUV).x;

    vec4 clipSpacePosition = vec4(inUV * 2.0 - 1.0, depth, 1.0);
    vec4 viewSpacePosition = cameraData.inverseProjectionMatrix * clipSpacePosition;
    viewSpacePosition = viewSpacePosition / viewSpacePosition.w;
	  vec4 samplePosition = cameraData.inverseViewMatrix * viewSpacePosition;

    

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    uint  shadowRayFlags =  gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    vec4 outColor = vec4(0.0, 1.0, 0.0, 1.0);

    
    vec3 worldPosition = samplePosition.xyz;
    vec3 incommingDirection = normalize(samplePosition.xyz - cameraData.cameraPosition);
    vec3 outgoingdirection = reflect(incommingDirection, normal.xyz);

    for(uint i = 0; i < globalDrawData.maxRecoursionDepth; i++)
    {
    traceRayEXT(topLevelAS, // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        samplePosition.xyz,     // ray origin
        tMin,           // ray min range
        outgoingdirection.xyz,  // ray direction
        tMax,           // ray max range
        1               // payload (location = 1)
        );
      
      if(payload.instanceID != 0)
      {
        vec3 barycentrics = payload.barycentrics;
        ivec3 indexTripplet = indices.i[payload.primitiveID];
  
	      Vertex v0 = vertices.v[indexTripplet.x];
	      Vertex v1 = vertices.v[indexTripplet.y];
	      Vertex v2 = vertices.v[indexTripplet.z];

        drawInstanceData instanceData = drawData.instanceData[payload.instanceID];

        mat4 modelMatrix = instanceData.modelMatrix;
        Material material = instanceData.material;

	      vec3 position = v0.position * barycentrics.x + v1.position * barycentrics.y + v2.position * barycentrics.z;
	      worldPosition = (modelMatrix * vec4(position, 1.0)).xyz;

        vec3 meshNormal = v0.normal * barycentrics.x + v1.normal * barycentrics.y + v2.normal * barycentrics.z;
        vec3 worldMeshNormal = normalize(vec3(modelMatrix * vec4(meshNormal, 0.0)));

        vec3 meshTangnet = v0.tangent * barycentrics.x + v1.tangent * barycentrics.y + v2.tangent * barycentrics.z;
        vec3 worldMeshTangnet = normalize(vec3(modelMatrix * vec4(meshTangnet, 0.0)));

        vec2 texCoord = v0.texCoord0 * barycentrics.x + v0.texCoord0 * barycentrics.y + v2.texCoord0 * barycentrics.z;

        vec3 worldMeshBitagnent = cross(worldMeshTangnet, worldMeshNormal);

        mat3 tbnMatrix = {worldMeshTangnet, worldMeshBitagnent, worldMeshNormal};

        vec4 colorTexture = texture(sampler2D(textures[material.albedoIndex], albedoSampler), texCoord);
	      vec4 normalTexture = texture(sampler2D(textures[material.normalIndex], normalSampler), texCoord);
	      vec4 metallicTexture = texture(sampler2D(textures[material.metallicIndex], metallicSampler), texCoord);
    	  vec4 roughnessTexture = texture(sampler2D(textures[material.roughnessIndex], roughnessSampler), texCoord);

        normal.xyz = tbnMatrix * normal.xyz;

        outColor.xyz = colorTexture.xyz;
      }
    }

    for(uint i = 0; i < globalDrawData.pointLightCount; i++)
    {
      outColor = color;
      vec3 lightDirection = pointLightBuffer.pointLights[0].position - samplePosition.xyz;
      float range = length(lightDirection);
      lightDirection = normalize(lightDirection);
      normal.xyz = normalize(normal.xyz);
      float cosTheta = dot(lightDirection, normal.xyz);

      shadowed = 0.3;
      if(cosTheta > 0)
      {
        traceRayEXT(topLevelAS, // acceleration structure
        shadowRayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        1,              // missIndex
        samplePosition.xyz,     // ray origin
        tMin,           // ray min range
        lightDirection.xyz,  // ray direction
        range,           // ray max range
        0               // payload (location = 0)
        );
      
        outColor.xyz = outColor.xyz * shadowed;
      }
    }
    

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), outColor);
}