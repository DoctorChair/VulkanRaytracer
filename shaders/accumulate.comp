#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform RenderBuffer{
	float fog;
	uint sunLightCount;
	uint pointLightCount;
	uint spotLightCount;
  	uint maxRecoursionDepth;
  	uint maxDiffuseSampleCount;
  	uint maxSpecularSampleCount;
  	uint maxShadowRaySampleCount;
  	uint noiseSampleTextureIndex;
	uint sampleSequenceLength;
	uint frameNumber;
	uint historyLength;
	uint historyIndex;
	uint nativeResolutionWidth;
	uint nativeResolutionHeight;
	uint environmentTextureIndex;
} globalDrawData;

layout(set = 0, binding = 1, rgba32f) uniform readonly image2D radianceHistory[32];
layout(set = 0, binding = 2, rgba32f) uniform readonly image2D velocityHistory[32];


layout(set = 1, binding = 0, rgba32f) uniform readonly image2D inputImage;
layout(set = 1, binding = 1, rgba32f) uniform writeonly image2D outputImage; 

vec4 loadInterpolateBilinearVelocity2D(vec3 texCoord, vec2 imageDimesions)
{
	vec2 imageCoord = texCoord.xy * vec2(imageDimesions);

	ivec2 a = ivec2(floor(imageCoord.x), floor(imageCoord.y));
	ivec2 b = ivec2(floor(imageCoord.x), ceil(imageCoord.y));
	ivec2 c = ivec2(ceil(imageCoord.x), floor(imageCoord.y));
	ivec2 d = ivec2(ceil(imageCoord.x), ceil(imageCoord.y));

	vec4 A = imageLoad(velocityHistory[uint(texCoord.z)], a);
	vec4 B = imageLoad(velocityHistory[uint(texCoord.z)], b);
	vec4 C = imageLoad(velocityHistory[uint(texCoord.z)], c);
	vec4 D = imageLoad(velocityHistory[uint(texCoord.z)], d);

	vec4 colorA = mix(A, B, imageCoord.y - floor(imageCoord.y));
	vec4 colorb = mix(C, D, imageCoord.y - floor(imageCoord.y));
	vec4 result = mix(colorA, colorb, imageCoord.x - floor(imageCoord.x));

	return result;
}

vec4 loadInterpolateBilinearRadiance2D(vec3 texCoord, vec2 imageDimesions)
{
	vec2 imageCoord = texCoord.xy * vec2(imageDimesions);

	ivec2 a = ivec2(floor(imageCoord.x), floor(imageCoord.y));
	ivec2 b = ivec2(floor(imageCoord.x), ceil(imageCoord.y));
	ivec2 c = ivec2(ceil(imageCoord.x), floor(imageCoord.y));
	ivec2 d = ivec2(ceil(imageCoord.x), ceil(imageCoord.y));

	vec4 A = imageLoad(radianceHistory[uint(texCoord.z)], a);
	vec4 B = imageLoad(radianceHistory[uint(texCoord.z)], b);
	vec4 C = imageLoad(radianceHistory[uint(texCoord.z)], c);
	vec4 D = imageLoad(radianceHistory[uint(texCoord.z)], d);

	vec4 colorA = mix(A, B, imageCoord.y - floor(imageCoord.y));
	vec4 colorb = mix(C, D, imageCoord.y - floor(imageCoord.y));
	vec4 result = mix(colorA, colorb, imageCoord.x - floor(imageCoord.x));

	return result;
}

void main()
{
	vec2 imageDimesions = vec2(globalDrawData.nativeResolutionWidth, globalDrawData.nativeResolutionHeight);
	//vec2 uv = gl_GlobalInvocationID.xy / vec2(globalDrawData.nativeResolutionWidth, globalDrawData.nativeResolutionHeight);
	
	const vec2 pixelCenter = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
  	vec2 uv = pixelCenter / imageDimesions;

	uint index = globalDrawData.historyIndex;
	
    vec4 radiance = vec4(0.0);
    vec4 currentFrame = loadInterpolateBilinearRadiance2D(vec3(uv, index), imageDimesions);
	radiance = currentFrame;
	
	vec4 nextFrame;

	vec4 oldH = loadInterpolateBilinearVelocity2D(vec3(uv, index), imageDimesions);
	vec4 newH;
	
	uint count = 1;
	bool abort = false;

    for(uint i = 1; i<globalDrawData.historyLength && !abort; i++)
    {	
		uv = uv - oldH.xy;

		index = index - 1 % globalDrawData.historyLength * uint(index != 0) + (globalDrawData.historyLength - 1) * uint(index == 0);   

		newH = loadInterpolateBilinearVelocity2D(vec3(uv, index), imageDimesions);
		
		nextFrame =  loadInterpolateBilinearRadiance2D(vec3(uv, index), imageDimesions);
		
		bool condition = int(oldH.z) == int(newH.z) && uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0;

		if(condition)
		{
			radiance = radiance + nextFrame;
			count++;
		}

		abort = !condition;
		oldH = newH;
    }

    radiance.xyz = radiance.xyz / float(count);

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), radiance);
}