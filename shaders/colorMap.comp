#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform RenderBuffer{
	uint sunLightCount;
	uint pointLightCount;
  	uint maxRecoursionDepth;
  	uint maxDiffuseSampleCount;
  	uint maxSpecularSampleCount;
  	uint maxShadowRaySampleCount;
  	uint noiseSampleTextureIndex;
	uint frameNumber;
	uint historyLength;
	uint historyIndex;
	uint nativeResolutionWidth;
	uint nativeResolutionHeight;
	uint environmentTextureIndex;
} globalDrawData;

layout(set = 0, binding = 1, rgba32f) uniform readonly image3D radianceHistory[1];
layout(set = 0, binding = 2, rgba32f) uniform readonly image2D velocityHistory[1];

layout(set = 1, binding = 0, rgba32f) uniform readonly image2D inputImage;
layout(set = 1, binding = 1, rgba32f) uniform writeonly image2D outputImage; 

vec4 loadInterpolateBilinear2D(vec2 texCoord, vec2 imageDimesions)
{
	vec2 imageCoord = texCoord * vec2(imageDimesions);

	ivec2 a = ivec2(floor(imageCoord.x), floor(imageCoord.y));
	ivec2 b = ivec2(floor(imageCoord.x), ceil(imageCoord.y));
	ivec2 c = ivec2(ceil(imageCoord.x), floor(imageCoord.y));
	ivec2 d = ivec2(ceil(imageCoord.x), ceil(imageCoord.y));

	vec4 A = imageLoad(inputImage, a);
	vec4 B = imageLoad(inputImage, b);
	vec4 C = imageLoad(inputImage, c);
	vec4 D = imageLoad(inputImage, d);

	vec4 colorA = mix(A, B, imageCoord.y - floor(imageCoord.y));
	vec4 colorb = mix(C, D, imageCoord.y - floor(imageCoord.y));
	vec4 result = mix(colorA, colorb, imageCoord.x - floor(imageCoord.x));

	return result;
}

void main()
{

    const float gamma = 2.2;
    const float exposure = 1.0;

    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = vec2(coord) / vec2(globalDrawData.nativeResolutionWidth, globalDrawData.nativeResolutionHeight);

    vec3 hdrColor = loadInterpolateBilinear2D(uv,  vec2(globalDrawData.nativeResolutionWidth, globalDrawData.nativeResolutionHeight)).xyz;
    
    vec3 mapped = vec3(1.0) - exp(-hdrColor * exposure);
    mapped = pow(mapped, vec3(1.0 / gamma));
	
    imageStore(outputImage, coord, vec4(mapped, 1.0));
}