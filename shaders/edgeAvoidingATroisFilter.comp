#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform RenderBuffer{
	float fog;
	uint sunLightCount;
	uint pointLightCount;
	uint spotLightCount;
  	uint maxRecoursionDepth;
  	uint maxDiffuseSampleCount;
  	uint maxSpecularSampleCount;
  	uint maxShadowRaySampleCount;
  	uint noiseSampleTextureIndex;
	uint sampleSequenceLength;
	uint frameNumber;
	uint historyLength;
	uint historyIndex;
	uint nativeResolutionWidth;
	uint nativeResolutionHeight;
} globalDrawData;

layout(set = 0, binding = 1, rgba32f) uniform readonly image3D radianceHistory;
layout(set = 0, binding = 2, rgba32f) uniform readonly image2D velocityHistory[2];
layout(set = 0, binding = 3, rgba32f) uniform readonly image2D position; 
layout(set = 0, binding = 4, rgba32f) uniform readonly image2D normal; 
layout(set = 0, binding = 5, r32f) uniform readonly image2D ID;

layout(set = 1, binding = 0, rgba32f) uniform readonly image2D inputImage;
layout(set = 1, binding = 1, rgba32f) uniform writeonly image2D outputImage; 

void main()
{
    const float weights[5] = float[5](0.0625, 0.25, 0.375, 0.25, 0.0625);

    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);	
    vec4 c = vec4(0.0);
    for(int i = 0; i<5; i++)
    {
        int distance = int(pow(2, i));

        int xStart = coord.x - 2 * distance;
       
        for(int j = 0; j<5; j++)
        {
            int yStart = coord.y - 2 * distance;
            for(int j = 0; j<5; j++)
            {
                xStart = clamp(xStart, 0, int(globalDrawData.nativeResolutionWidth)); 
                yStart = clamp(yStart, 0, int(globalDrawData.nativeResolutionHeight)); 
                ivec2 uv = ivec2(xStart, yStart);
                c = c + imageLoad(inputImage, ivec2(uv)) * 1/25.0; 
                yStart = yStart + distance;
            } 
            xStart = xStart + distance;
        }
        
    }

    c = c / 5.0;

    imageStore(outputImage, coord, c);
}