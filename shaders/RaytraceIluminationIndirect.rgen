#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "BRDF.glsl"
#include "common.glsl"


layout(set = 0, binding = 0) uniform  CameraBuffer{
	mat4 viewMatrix;
	mat4 inverseViewMatrix;
  mat4 projectionMatrix;
  mat4 inverseProjectionMatrix;
	vec3 cameraPosition;
} cameraData;

layout(set = 0, binding = 1) uniform  RenderBuffer{
	float fog;
	uint sunLightCount;
	uint pointLightCount;
	uint spotLightCount;
  uint maxRecoursionDepth;
  uint maxDiffuseSampleCount;
  uint maxSpecularSampleCount;
  uint maxShadowRaySampleCount;
  uint noiseSampleTextureIndex;
  uint sampleSequenceLength;
  uint frameNumber;
  uint historyLength;
	uint historyIndex;
	uint nativeResolutionWidth;
	uint nativeResolutionHeight;
  uint environmentTextureIndex;
} globalDrawData;


layout(set = 1, binding = 0) uniform sampler2D primaryRayUnlitColorTexture;
layout(set = 1, binding = 1) uniform sampler2D primaryRayNormalTexture;
layout(set = 1, binding = 2) uniform sampler2D primaryRayDepthTexture;
layout(set = 1, binding = 3) uniform sampler2D primaryRayRoughnessMetalicTexture;
layout(set = 1, binding = 4) uniform sampler2D primaryRayPositionTexture;
layout(set = 1, binding = 5) uniform sampler2D primaryRayEmissionTexture;

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 2, binding = 1, rgba32f) uniform image2D image;
layout(std430, set = 2, binding = 4) readonly buffer sampleSequenceBuffer{
  vec2 samples[];
} sampleSequence;

layout(std430, set = 3, binding = 0) readonly buffer SunBuffer{
	SunLight sunLights[];
} sunLightBuffer;

layout(std430, set = 3, binding = 1) readonly buffer PointBuffer{
	PointLight pointLights[];
} pointLightBuffer;

layout(std430, set = 3, binding = 2) readonly buffer SpotBuffer{
	SpotLight spotLights[];
} spotLightBuffer; 

layout(set = 4, binding = 0) uniform sampler linearSampler;
layout(set = 4, binding = 1) uniform sampler nearestSampler;

layout(std430, set = 5, binding = 0) readonly buffer DrawInstanceBuffer{
	drawInstanceData instanceData[];
} drawData;

layout(set = 6, binding = 0) uniform texture2D textures[1024]; 

struct hitPayload
{
  bool miss;
  vec3 radiance;
  uint depth;
};

layout(location = 1) rayPayloadEXT hitPayload payload;
layout(location = 0) rayPayloadEXT float shadowPayload;

void main()
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec4 color = texture(primaryRayUnlitColorTexture, inUV);
  vec4 normal = texture(primaryRayNormalTexture, inUV);
  float depth = texture(primaryRayDepthTexture, inUV).x;
  vec4 roughnessMetalness = texture(primaryRayRoughnessMetalicTexture, inUV);
  vec4 samplePosition = texture(primaryRayPositionTexture, inUV);
  vec4 primaryEmission = texture(primaryRayEmissionTexture, inUV);

  vec2 imageDimesions = vec2(float(globalDrawData.nativeResolutionWidth), float(globalDrawData.nativeResolutionHeight));
  vec4 outColor = vec4(0.0, 0.0, 0.0, 1.0);

  if(length(normal.xyz) == 0.0)
  {
    vec4 origin    = cameraData.inverseViewMatrix * vec4(0, 0, 0, 1);
    vec4 target    = cameraData.inverseProjectionMatrix * vec4(d.x, d.y, 1, 1);
    vec4 direction = cameraData.inverseViewMatrix * vec4(normalize(target.xyz), 0);

    vec2 sphereUV = vec2(atan(direction.x, direction.z) / (2*M_PI) + 0.5, -direction.y * 0.5 + 0.5); 
    outColor = texture(sampler2D(textures[globalDrawData.environmentTextureIndex], linearSampler), sphereUV);
  }
  else
  {
  
  normal.xyz = normalize(normal.xyz);
	float reflectance = 0.04;	
	float roughness = roughnessMetalness.x;
	float metallic = roughnessMetalness.y;

  vec3 viewDirection = normalize(cameraData.cameraPosition - samplePosition.xyz);
  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  uint  shadowRayFlags =  gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
  float tMin     = 0.01;
  float tMax     = 100.0;
  
  vec2 offset = vec2(float((globalDrawData.frameNumber) % globalDrawData.historyLength)) / imageDimesions;
  vec4 screenNoise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], linearSampler), inUV * imageDimesions / 1024.0 + offset);

  float filterExponent = 1.0;
  
  vec3 radiance = vec3(0.0, 0.0, 0.0);

    vec3 diffuseRadiance = vec3(0.0);
    vec3 specularRadiance = vec3(0.0);

  
  payload.radiance = vec3(radiance);
  
  payload.depth = 0;

  vec3 w = vec3(0.0);

  if(metallic < 0.8)
  {
  for(uint i = 0; i < globalDrawData.maxDiffuseSampleCount; i++)
  {
    vec4 noise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], linearSampler), screenNoise.xy + vec2(float(i)) / imageDimesions);

    
    vec3 sampleDirection = createCosineWeightedHemisphereSample(normal.xyz, noise.x, noise.y * 2.0 - 0.5);
    float pdfValue = sqrt(1.0 - noise.x);

    float ggxPdfValue = ggxImportancePDF(noise.x, roughness * roughness);

    float weight = veachPowerHeurisitk(pdfValue, ggxPdfValue, filterExponent);
    weight = weight / pdfValue;

    float cosTheta = max(dot(sampleDirection, normal.xyz), 0.0);
    
    traceRayEXT(topLevelAS, // acceleration structure
      rayFlags,       // rayFlags
      0xFF,           // cullMask
      0,              // sbtRecordOffset
      0,              // sbtRecordStride
      0,              // missIndex
      samplePosition.xyz,     // ray origin
      tMin,           // ray min range
      sampleDirection,  // ray direction
      tMax,           // ray max range
      1               // payload (location = 0)
      );

    vec3 r0 = mix(vec3(reflectance), color.xyz, metallic);
    vec3 fresnel = fresnelSchlick(r0, cosTheta);
    vec3 lambert = color.xyz * (vec3(1.0) - fresnel) * (1.0 - metallic);

    diffuseRadiance = diffuseRadiance + weight * (lambert * cosTheta * payload.radiance);
    
  }
  diffuseRadiance = diffuseRadiance / float( globalDrawData.maxDiffuseSampleCount);
  }

  payload.radiance = vec3(radiance);

  for(uint i = 0; i < globalDrawData.maxSpecularSampleCount; i++)
	{
    uint index = (i + globalDrawData.frameNumber) % globalDrawData.sampleSequenceLength;

    vec4 noise = texture(sampler2D(textures[globalDrawData.noiseSampleTextureIndex], linearSampler), screenNoise.xy + vec2(float(i)) / imageDimesions);

    float pdfValue = ggxImportancePDF(noise.x, roughness * roughness);
    float lambertPDFValue = sqrt(1.0 - noise.x);

    pdfValue = max(pdfValue, 0.001);
    float weight = veachPowerHeurisitk(pdfValue, lambertPDFValue, filterExponent);
    weight = weight / pdfValue * (float(metallic < 0.8)) + 1.0 * (float(metallic >= 0.8));


    vec3 halfwayVector = createSampleVector(normal.xyz, 0.5 * M_PI, 2.0 * M_PI, pdfValue, (noise.y - 0.5) * 2.0);

    vec3 reflectionDirection = reflect(-viewDirection, halfwayVector);

		float cosTheta = max(dot(reflectionDirection, normal.xyz), 0.0);

		traceRayEXT(topLevelAS, // acceleration structure
        rayFlags,       // rayFlags
        0xFF,           // cullMask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        samplePosition.xyz,     // ray origin
        tMin,           // ray min range
        reflectionDirection,  // ray direction
        tMax,           // ray max range
        1               // payload (location = 0)
        );

    vec3 brdf = ggxSpecularBRDF(viewDirection, reflectionDirection, normal.xyz, color.xyz, metallic, roughness, reflectance); 

    specularRadiance = specularRadiance + weight * (payload.radiance * cosTheta * brdf);
	} 
  specularRadiance = specularRadiance / float(globalDrawData.maxSpecularSampleCount);
  

  outColor.xyz = radiance;
  outColor.xyz = outColor.xyz + specularRadiance; 
  outColor.xyz = outColor.xyz + diffuseRadiance;
  outColor.xyz = primaryEmission.xyz * (float(length(primaryEmission) > 0)) + outColor.xyz * (float(length(primaryEmission) == 0.0));
  
  outColor.w = depth;
  }
  
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), outColor);
}